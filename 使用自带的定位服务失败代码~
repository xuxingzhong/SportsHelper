package com.example.root.sportshelper;

//跑步中,使用高德地图来更新位置
import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.example.root.sportshelper.database.GpsRecord;
import com.example.root.sportshelper.ruler.LongpressCircle;
import com.example.root.sportshelper.utils.Constant;
import com.example.root.sportshelper.utils.MiscUtil;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.TimerTask;

public class InRunning extends AppCompatActivity implements View.OnClickListener,LocationListener{
    private String TAG="InRunning";
    private static final int GpsprecisionLow= 1;
    private static final int SHOWMESSAGE= 2;
    private static final int TIMECOUNT=3;           //计时

    ImageView showMap;
    LongpressCircle longpress_suspend;
    LinearLayout ContinueOrend;
    TextView Continue;
    TextView end;
    TextView distance;
    TextView speed;
    TextView UseTime;
    TextView ExpendCalorie;
    private int num=0;

    Boolean stop = true;
    Boolean saved = true;
    Boolean firstStart = true;
    float curr_speed = 0;
    long total_time = 0;
    long last_time = 0;
    float curr_distance = 0;
    Date startTime;
    ArrayList<GpsRecord> locations = new ArrayList<>();
    LocationManager manager;
    Location nowLocation;
    private String provider;                //提供器
    long preLowAccuracyTime;
    int lowAccuracyCnt = 0;

    // Handler gets created on the UI-thread
    private Handler mHandler = new Handler(){
        public void handleMessage(Message message){
            switch (message.what){
                case GpsprecisionLow:
                    Toast.makeText(getApplicationContext(), String.format(getResources().getString(R.string.gps_precision_low2), Constant.LOCATION_ACCURACY), Toast.LENGTH_LONG).show();
                    break;
                case SHOWMESSAGE:
                    speed.setText(String.format("%s", MiscUtil.getSpeedString(curr_speed)));           //速度
                    distance.setText(String.format("%.2f", MiscUtil.getDistance(curr_distance)));          //距离
                    break;
                case TIMECOUNT:
                    UseTime.setText(message.getData().getString("myTime"));
                    break;
            }
        }
    };


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.in_running);

        initView();
        setDefaultView();
        initConstant();
        startTimeCount();

        //获取最好中的位置信息

        longpress_suspend.setOnLongClickListener(new LongpressCircle.OnLongClickListener(){
            @Override
            public boolean onLongClick(View view) {
                stop = true;
                stopLocationUpdates();
                longpress_suspend.setVisibility(View.GONE);
                ContinueOrend.setVisibility(View.VISIBLE);
                return false;
            }
        });
    }

    private void initView(){
        showMap=(ImageView)findViewById(R.id.showMap);
        longpress_suspend=(LongpressCircle)findViewById(R.id.longpress_suspend);
        showMap.setOnClickListener(this);
        //longpress_suspend.setOnLongClickListener(this);
        ContinueOrend=(LinearLayout)findViewById(R.id.ContinueOrend);
        Continue=(TextView)findViewById(R.id.Continue);
        end=(TextView)findViewById(R.id.end);
        Continue.setOnClickListener(this);
        end.setOnClickListener(this);
        manager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);

        distance=(TextView)findViewById(R.id.distance);
        speed=(TextView)findViewById(R.id.speed);
        UseTime=(TextView)findViewById(R.id.UseTime);
        ExpendCalorie=(TextView)findViewById(R.id.ExpendCalorie);

        speed.setText(String.format("%s", MiscUtil.getSpeedString(curr_speed)));           //速度
        distance.setText(String.format("%.2f", MiscUtil.getDistance(curr_distance)));          //距离
        ExpendCalorie.setText(0+"");
    }

    private void setDefaultView()
    {
        longpress_suspend.setVisibility(View.VISIBLE);
        ContinueOrend.setVisibility(View.GONE);
    }

    //初始化常量
    private void initConstant(){
        last_time = System.currentTimeMillis();
        if (stop) {
            //current is stop, we will start it
            if (startLocationUpdates()) {
                stop = false;
            }else{
                // start location listening fail.
                return;
            }
        }
        if (firstStart) {
            firstStart = false;
            locations.clear();
            curr_distance = 0;
            curr_speed = 0;
            total_time = 0;
            saved = false;
            startTime = new Date();
        }
    }
    //开始计时
    private void startTimeCount(){
        // update the time
        Thread thread = new Thread()
        {
            @Override
            public void run() {
                try {
                    while(true) {
                        sleep(1000);
                        if (stop) continue;
                        total_time += System.currentTimeMillis() - last_time;
                        last_time = System.currentTimeMillis();
                        long total_time_tmp = total_time / 1000;
                        final String timeStr = String.format("%d:%02d:%02d", total_time_tmp / 3600, total_time_tmp % 3600 / 60, total_time_tmp % 3600 % 60);
                        Message message=new Message();
                        message.what=TIMECOUNT;
                        Bundle bundle=new Bundle();
                        bundle.putString("myTime",timeStr);
                        message.setData(bundle);
                        mHandler.sendMessage(message);
                    }
                } catch (InterruptedException e) {}
            }
        };
        thread.start();
    }

    protected boolean startLocationUpdates() {
        try {
            provider=getBestProvider(manager);
            manager.requestLocationUpdates(provider,
                    Constant.INTERVAL_LOCATION * 1000L, Constant.MIN_DISTANCE * 0.1f, this);
            return true;
        } catch (SecurityException e) {
            Toast.makeText(getBaseContext(), getResources().getString(R.string.gps_no_permision), Toast.LENGTH_LONG).show();
            return false;
        }catch (Exception eall) {
            Toast.makeText(getBaseContext(), getResources().getString(R.string.gps_listen_fail) + eall.getMessage(), Toast.LENGTH_LONG).show();
            return false;
        }
    }

    private String getBestProvider(LocationManager locationManager){
        String myProvider=null;
        // 获取所有可用的位置提供器
        List<String> providerList = locationManager.getProviders(true);
        if (providerList.contains(LocationManager.GPS_PROVIDER)) {
            myProvider = LocationManager.NETWORK_PROVIDER;
        } else if (providerList.contains(LocationManager.NETWORK_PROVIDER)) {
            myProvider = LocationManager.NETWORK_PROVIDER;
        } else {
            // 当没有可用的位置提供器时，弹出Toast提示用户
            Toast.makeText(this, "No location provider to use", Toast.LENGTH_SHORT).show();
        }
        return myProvider;
    }

    protected boolean stopLocationUpdates() {
        try {
            manager.removeUpdates(this);
            return true;
        } catch (SecurityException e) {
            Toast.makeText(getBaseContext(), getResources().getString(R.string.gps_no_permision), Toast.LENGTH_LONG).show();
            return false;
        }catch (Exception eall) {
            Toast.makeText(getBaseContext(), getResources().getString(R.string.gps_listen_fail) + eall.getMessage(), Toast.LENGTH_LONG).show();
            return false;
        }
    }

    private void saveLocation(Location l) {
        Log.i(TAG, "saveLocation: 调用了");
        float dist = 0, speed = 0;
        double alt=0;
        if (l==null){
            Log.i(TAG, "位置为空");
            return;
        }

        Date date = new Date(l.getTime());
        final GpsRecord gps = new GpsRecord(date, l);

        //如果有精度值而且获得这个位置的估计精度
        if (l.hasAccuracy() && l.getAccuracy() > Constant.LOCATION_ACCURACY) {
            Log.i(TAG, String.format(getResources().getString(R.string.gps_precision_low), l.getAccuracy()));
            if  (date.getTime()-preLowAccuracyTime < Constant.INTERVAL_LOCATION * 5 * 1000) {
                lowAccuracyCnt++;
            } else {
                if (lowAccuracyCnt > 2) {
                    Message message=new Message();
                    message.what=GpsprecisionLow;
                    mHandler.sendMessage(message);
                }
                lowAccuracyCnt = 0;
                preLowAccuracyTime = date.getTime();
            }
            return;
        }

        if (locations.size() > 0) {
            GpsRecord pre = locations.get(locations.size() - 1);
            dist = pre.loc.distanceTo(l);
            dist = Math.abs(dist);

            //get a temporal speed, and it will be corrected by a average speed.
            speed = dist / (1.0f * (date.getTime() - pre.getDate().getTime()) / 1000);
            if (l.hasAltitude()){
                alt = l.getAltitude();
            }else{
                alt = Constant.INVALID_ALT;
            }
        }

        // speed: get the avg speed of SPEED_AVG points
        if (Constant.SPEED_AVG > 0 && locations.size()>=Constant.SPEED_AVG-1) {
            GpsRecord preN = locations.get(locations.size() - (Constant.SPEED_AVG - 1));
            float dist_avg = l.distanceTo(preN.loc);
            dist_avg = Math.abs(dist_avg);
            speed = dist_avg / (1.0f * (date.getTime() - preN.getDate().getTime()) / 1000);
        }

        gps.distance = dist;
        gps.speed = speed;
        gps.alt = alt;
        locations.add(gps);
        curr_speed = speed;
        curr_distance += dist;
        total_time += date.getTime() - last_time;
        last_time = date.getTime();
        Log.i(TAG, String.format("%s", gps.toString()));

        Message message=new Message();
        message.what=SHOWMESSAGE;
        mHandler.sendMessage(message);

        //broadcast a message
//        Intent msg = new Intent(BC_INTENT);
//        msg.putExtra(EXTRA_GpsRec, gps);
//        sendOrderedBroadcast(msg,null);
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.showMap:
                if(ContextCompat.checkSelfPermission(InRunning.this, Manifest.permission.ACCESS_FINE_LOCATION)!= PackageManager.PERMISSION_GRANTED){
                    ActivityCompat.requestPermissions(InRunning.this,new String[]{Manifest.permission.ACCESS_FINE_LOCATION},1);
                }else {
                    Intent intent=new Intent(InRunning.this,ShowMap.class);
                    intent.putExtra("myLocations", locations);
                    startActivity(intent);
                }
                break;
            case R.id.Continue:
                last_time = System.currentTimeMillis();
                if (stop) {
                    //current is stop, we will start it
                    if (startLocationUpdates()) {
                        stop = false;
                    }else{
                        // start location listening fail.
                        return;
                    }
                }
                longpress_suspend.setVisibility(View.VISIBLE);
                ContinueOrend.setVisibility(View.GONE);
                break;
            case R.id.end:
                finish();
                break;
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        switch (requestCode){
            case 1:
                if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){
                    Intent intent=new Intent(InRunning.this,ShowMap.class);
                    startActivity(intent);
                }else {
                    Toast.makeText(this,"you denied the permission",Toast.LENGTH_SHORT).show();
                }
                break;
            default:
        }
    }

    @Override
    public void onLocationChanged(Location location) {
        Log.i(TAG, "onLocationChanged: 调用了");
        saveLocation(location);
    }

    @Override
    public void onStatusChanged(String s, int i, Bundle bundle) {

    }

    @Override
    public void onProviderEnabled(String s) {

    }

    @Override
    public void onProviderDisabled(String s) {

    }

    @Override
    protected void onDestroy() {
        stopLocationUpdates();
        super.onDestroy();
    }

}

